{"version":3,"sources":["pages/ListeEmployees.js"],"names":["columns","id","label","ListeEmployees","useState","rows","setRows","page","setPage","rowsPerPage","setRowsPerPage","searchTerm","setSearchTerm","order","setOrder","orderBy","setOrderBy","descendingComparator","a","b","vA","vB","includes","dateA","split","Date","dateB","useEffect","JSON","parse","localStorage","getItem","map","employee","startDate","format","birth","filter","index","isFilter","Object","keys","some","item","createSortHandler","property","event","handleRequestSort","className","sx","width","margin","stickyHeader","column","style","minWidth","active","direction","onClick","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","slice","row","hover","role","tabIndex","value","labelDisplayedRows","from","to","count","component","length","onPageChange","newPage","onRowsPerPageChange","target","htmlFor","type","onChange"],"mappings":"gPAaMA,EAAU,CACd,CAAEC,GAAI,YAAaC,MAAO,cAC1B,CAAED,GAAI,WAAYC,MAAO,aACzB,CAAED,GAAI,YAAaC,MAAO,cAC1B,CAAED,GAAI,aAAcC,MAAO,cAC3B,CAAED,GAAI,QAASC,MAAO,iBACtB,CAAED,GAAI,SAAUC,MAAO,UACvB,CAAED,GAAI,OAAQC,MAAO,QACrB,CAAED,GAAI,QAASC,MAAO,SACtB,CAAED,GAAI,UAAWC,MAAO,aAiLXC,UA9Kf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAYA,EAA0BR,mBAAS,OAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAA8BV,mBAAS,aAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KAwBA,SAASC,EAAqBC,EAAGC,EAAGJ,GAClC,IAAIK,EAAKF,EAAEH,GACPM,EAAKF,EAAEJ,GACX,GAAI,CAAC,YAAa,SAASO,SAASP,GAAU,CAC5C,IAAIQ,EAAQH,EAAGI,MAAM,KACrBJ,EAAK,IAAIK,KAAKF,EAAM,GAAIA,EAAM,GAAK,EAAGA,EAAM,IAC5C,IAAIG,EAAQL,EAAGG,MAAM,KACrBH,EAAK,IAAII,KAAKC,EAAM,GAAIA,EAAM,GAAK,EAAGA,EAAM,IAE9C,OAAIL,EAAKD,GACC,EAENC,EAAKD,EACA,EAEF,EArCTO,qBAAU,WACRrB,GANOsB,KAAKC,MAAMC,aAAaC,QAAQ,oBAAsB,IAQxDC,KAAI,SAACC,GACJ,OAAO,2BACFA,GADL,IAEEC,UAAWC,YAAO,IAAIV,KAAKQ,EAASC,WAAY,cAChDE,MAAOD,YAAO,IAAIV,KAAKQ,EAASG,OAAQ,mBAG3CC,QAAO,SAACJ,EAAUK,GACjB,IAAIC,GAAW,EAKf,OAJAC,OAAOC,KAAKR,GAAUS,MAAK,SAACC,GAE1B,OADAJ,EAAWN,EAASU,GAAMrB,SAASX,MAG9B4B,QAGZ,CAAC5B,IAsCJ,IAKMiC,EAAoB,SAACC,GAAD,OAAc,SAACC,IALf,SAACA,EAAOD,GAEhC/B,EADcC,IAAY8B,GAAsB,QAAVhC,EACrB,OAAS,OAC1BG,EAAW6B,GAGXE,CAAkBD,EAAOD,KAE3B,OACE,qCACE,oBAAIG,UAAU,aAAd,+BACA,eAAC,IAAD,CACEC,GAAI,CACFC,MAAO,QACPC,OAAQ,QAHZ,UAME,cAAC,IAAD,UAGE,eAAC,IAAD,CAAOC,cAAY,EAAC,aAAW,eAA/B,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACGpD,EAAQgC,KAAI,SAACqB,GAAD,OACX,cAAC,IAAD,CAEEC,MAAO,CAAEC,SAAUF,EAAOE,UAF5B,SAIE,cAAC,IAAD,CACEC,OAAQzC,IAAYsC,EAAOpD,GAC3BwD,UAAW1C,IAAYsC,EAAOpD,GAAKY,EAAQ,MAC3C6C,QAASd,EAAkBS,EAAOpD,IAHpC,SAKGoD,EAAOnD,SARLmD,EAAOpD,WAcpB,cAAC,IAAD,UAnDV,SAAoB0D,EAAOC,GACzB,IAAMC,EAAiBF,EAAM3B,KAAI,SAAC8B,EAAIxB,GAAL,MAAe,CAACwB,EAAIxB,MAQrD,OAPAuB,EAAeE,MAAK,SAAC7C,EAAGC,GACtB,IAAMN,EAAQ+C,EAAW1C,EAAE,GAAIC,EAAE,IACjC,OAAc,IAAVN,EACKA,EAEFK,EAAE,GAAKC,EAAE,MAEX0C,EAAe7B,KAAI,SAAC8B,GAAD,OAAQA,EAAG,MA2C1BE,CAAW3D,EAzDxB,SAAuBQ,EAAOE,GAC5B,MAAiB,SAAVF,EACH,SAACK,EAAGC,GAAJ,OAAUF,EAAqBC,EAAGC,EAAGJ,IACrC,SAACG,EAAGC,GAAJ,OAAWF,EAAqBC,EAAGC,EAAGJ,IAsDdkD,CAAcpD,EAAOE,IACpCmD,MAAM3D,EAAOE,EAAaF,EAAOE,EAAcA,GAC/CuB,KAAI,SAACmC,EAAK7B,GACT,OACE,cAAC,IAAD,CAAU8B,OAAK,EAACC,KAAK,WAAWC,UAAW,EAA3C,SACGtE,EAAQgC,KAAI,SAACqB,GACZ,IAAMkB,EAAQJ,EAAId,EAAOpD,IACzB,OACE,cAAC,IAAD,UACGoD,EAAOlB,QAA2B,kBAAVoC,EACrBlB,EAAOlB,OAAOoC,GACdA,GAHUlB,EAAOpD,QAJsBqC,aAiB9D,sBAAKU,UAAU,YAAf,UACD,cAAC,IAAD,CACEwB,mBAAoB,YAIhB,IAHFC,EAGC,EAHDA,KACAC,EAEC,EAFDA,GACAC,EACC,EADDA,MAEA,MAAM,WAAN,OAAkBF,EAAlB,eAA6BC,EAA7B,gBACa,IAAXC,EAAeA,EAAf,oBAAoCD,GADtC,aAIFE,UAAU,MACVD,MAAOtE,EAAKwE,OACZpE,YAAaA,EACbF,KAAMA,EACNuE,aAnJiB,SAAChC,EAAOiC,GAC/BvE,EAAQuE,IAmJFC,oBAhJwB,SAAClC,GAC/BpC,GAAgBoC,EAAMmC,OAAOV,OAC7B/D,EAAQ,MAgJA,sBAAKwC,UAAU,iBAAf,UACE,uBAAOkC,QAAQ,YAAf,sBACA,uBACEjF,GAAG,YACHkF,KAAK,OACLC,SAAU,SAACtC,GACTlC,EAAckC,EAAMmC,OAAOV,mBAMvC,cAAC,IAAD,CAAMvB,UAAU,OAAO0B,GAAG,IAA1B","file":"static/js/6.4461af56.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst columns = [\r\n  { id: 'firstName', label: 'First Name' },\r\n  { id: 'lastName', label: 'Last Name' },\r\n  { id: 'startDate', label: 'Start Date' },\r\n  { id: 'department', label: 'Department' },\r\n  { id: 'birth', label: 'Date of Birth' },\r\n  { id: 'street', label: 'Street' },\r\n  { id: 'city', label: 'City' },\r\n  { id: 'state', label: 'State' },\r\n  { id: 'zipCode', label: 'Zip Code' },\r\n];\r\n\r\nfunction ListeEmployees() {\r\n\r\n  const [rows, setRows] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n  const getListeEmployees = () => {\r\n    return JSON.parse(localStorage.getItem('listeEmployees')) || [];\r\n  };\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('firstName');\r\n\r\n  useEffect(() => {\r\n    setRows(\r\n      getListeEmployees()\r\n        .map((employee) => {\r\n          return {\r\n            ...employee,\r\n            startDate: format(new Date(employee.startDate), 'dd/MM/yyyy'),\r\n            birth: format(new Date(employee.birth), 'dd/MM/yyyy'),\r\n          };\r\n        })\r\n        .filter((employee, index) => {\r\n          let isFilter = false;\r\n          Object.keys(employee).some((item) => {\r\n            isFilter = employee[item].includes(searchTerm);\r\n            return isFilter;\r\n          });\r\n          return isFilter;\r\n        })\r\n    );\r\n  }, [searchTerm]);\r\n\r\n\r\n  function descendingComparator(a, b, orderBy) {\r\n    let vA = a[orderBy];\r\n    let vB = b[orderBy];\r\n    if (['startDate', 'birth'].includes(orderBy)) {\r\n      let dateA = vA.split('/');\r\n      vA = new Date(dateA[2], dateA[1] - 1, dateA[0]);\r\n      let dateB = vB.split('/');\r\n      vB = new Date(dateB[2], dateB[1] - 1, dateB[0]);\r\n    }\r\n    if (vB < vA) {\r\n      return -1;\r\n    }\r\n    if (vB > vA) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n  }\r\n  function stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) {\r\n        return order;\r\n      }\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n  }\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  const createSortHandler = (property) => (event) => {\r\n    handleRequestSort(event, property);\r\n  };\r\n  return (\r\n    <>\r\n      <h1 className=\"title deux\">Current Employees</h1>\r\n      <Paper\r\n        sx={{\r\n          width: '950px',\r\n          margin: 'auto',\r\n        }}\r\n      >\r\n        <TableContainer >\r\n         \r\n\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    style={{ minWidth: column.minWidth }}\r\n                  >\r\n                    <TableSortLabel\r\n                      active={orderBy === column.id}\r\n                      direction={orderBy === column.id ? order : 'asc'}\r\n                      onClick={createSortHandler(column.id)}\r\n                    >\r\n                      {column.label}\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\r\n                      {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id}>\r\n                            {column.format && typeof value === 'number'\r\n                              ? column.format(value)\r\n                              : value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n         <div className=\"tabSearch\">\r\n        <TablePagination\r\n          labelDisplayedRows={function defaultLabelDisplayedRows({\r\n            from,\r\n            to,\r\n            count,\r\n          }) {\r\n            return `Showing ${from} to ${to} of ${\r\n              count !== -1 ? count : `more than ${to}`\r\n            } entries`;\r\n          }}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n            <div className=\"tabSearchInput\">\r\n              <label htmlFor=\"searchBar\">Search :</label>\r\n              <input\r\n                id=\"searchBar\"\r\n                type=\"text\"\r\n                onChange={(event) => {\r\n                  setSearchTerm(event.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n      </Paper>\r\n      <Link className=\"link\" to=\"/\">\r\n        Home\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\nexport default ListeEmployees;\r\n"],"sourceRoot":""}